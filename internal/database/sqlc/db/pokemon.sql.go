// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pokemon.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOwnedPokemon = `-- name: AddOwnedPokemon :one
INSERT INTO ownpoke (
    trainer_id,
    name,
    height,
    weight,
    base_experience,
    stats,
    types,
    basic_skill,
    special_skill
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, trainer_id, name, height, weight, base_experience, stats, types, caught_at, basic_skill, special_skill
`

type AddOwnedPokemonParams struct {
	TrainerID      int32  `json:"trainer_id"`
	Name           string `json:"name"`
	Height         int32  `json:"height"`
	Weight         int32  `json:"weight"`
	BaseExperience int32  `json:"base_experience"`
	Stats          []byte `json:"stats"`
	Types          []byte `json:"types"`
	BasicSkill     []byte `json:"basic_skill"`
	SpecialSkill   []byte `json:"special_skill"`
}

func (q *Queries) AddOwnedPokemon(ctx context.Context, arg AddOwnedPokemonParams) (Ownpoke, error) {
	row := q.db.QueryRow(ctx, addOwnedPokemon,
		arg.TrainerID,
		arg.Name,
		arg.Height,
		arg.Weight,
		arg.BaseExperience,
		arg.Stats,
		arg.Types,
		arg.BasicSkill,
		arg.SpecialSkill,
	)
	var i Ownpoke
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.BaseExperience,
		&i.Stats,
		&i.Types,
		&i.CaughtAt,
		&i.BasicSkill,
		&i.SpecialSkill,
	)
	return i, err
}

const addPokemonToParty = `-- name: AddPokemonToParty :one
INSERT INTO party (
    trainer_id,
    ownpoke_id,
    slot
) VALUES (
    $1, $2, $3
)
ON CONFLICT (trainer_id, slot) 
DO UPDATE SET ownpoke_id = EXCLUDED.ownpoke_id, added_at = NOW()
RETURNING id, trainer_id, ownpoke_id, slot, added_at
`

type AddPokemonToPartyParams struct {
	TrainerID int32 `json:"trainer_id"`
	OwnpokeID int32 `json:"ownpoke_id"`
	Slot      int32 `json:"slot"`
}

func (q *Queries) AddPokemonToParty(ctx context.Context, arg AddPokemonToPartyParams) (Party, error) {
	row := q.db.QueryRow(ctx, addPokemonToParty, arg.TrainerID, arg.OwnpokeID, arg.Slot)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.OwnpokeID,
		&i.Slot,
		&i.AddedAt,
	)
	return i, err
}

const createPokedexEntry = `-- name: CreatePokedexEntry :exec
INSERT INTO pokedex (
    trainer_id,
    name,
    height,
    weight,
    base_experience,
    stats,
    types
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) 
ON CONFLICT (trainer_id, name) DO NOTHING
`

type CreatePokedexEntryParams struct {
	TrainerID      int32  `json:"trainer_id"`
	Name           string `json:"name"`
	Height         int32  `json:"height"`
	Weight         int32  `json:"weight"`
	BaseExperience int32  `json:"base_experience"`
	Stats          []byte `json:"stats"`
	Types          []byte `json:"types"`
}

func (q *Queries) CreatePokedexEntry(ctx context.Context, arg CreatePokedexEntryParams) error {
	_, err := q.db.Exec(ctx, createPokedexEntry,
		arg.TrainerID,
		arg.Name,
		arg.Height,
		arg.Weight,
		arg.BaseExperience,
		arg.Stats,
		arg.Types,
	)
	return err
}

const deletePokedexEntry = `-- name: DeletePokedexEntry :exec
DELETE FROM pokedex
WHERE id = $1
`

func (q *Queries) DeletePokedexEntry(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePokedexEntry, id)
	return err
}

const getOwnedPokemonByID = `-- name: GetOwnedPokemonByID :one
SELECT id, trainer_id, name, height, weight, base_experience, stats, types, caught_at, basic_skill, special_skill FROM ownpoke
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOwnedPokemonByID(ctx context.Context, id int32) (Ownpoke, error) {
	row := q.db.QueryRow(ctx, getOwnedPokemonByID, id)
	var i Ownpoke
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.BaseExperience,
		&i.Stats,
		&i.Types,
		&i.CaughtAt,
		&i.BasicSkill,
		&i.SpecialSkill,
	)
	return i, err
}

const getPartyByTrainer = `-- name: GetPartyByTrainer :many
SELECT p.id, p.trainer_id, p.ownpoke_id, p.slot, p.added_at, o.name, o.stats, o.types, o.height, o.weight, o.base_experience, o.basic_skill, o.special_skill
FROM party p
JOIN ownpoke o ON p.ownpoke_id = o.id
WHERE p.trainer_id = $1
ORDER BY p.slot
`

type GetPartyByTrainerRow struct {
	ID             int32            `json:"id"`
	TrainerID      int32            `json:"trainer_id"`
	OwnpokeID      int32            `json:"ownpoke_id"`
	Slot           int32            `json:"slot"`
	AddedAt        pgtype.Timestamp `json:"added_at"`
	Name           string           `json:"name"`
	Stats          []byte           `json:"stats"`
	Types          []byte           `json:"types"`
	Height         int32            `json:"height"`
	Weight         int32            `json:"weight"`
	BaseExperience int32            `json:"base_experience"`
	BasicSkill     []byte           `json:"basic_skill"`
	SpecialSkill   []byte           `json:"special_skill"`
}

func (q *Queries) GetPartyByTrainer(ctx context.Context, trainerID int32) ([]GetPartyByTrainerRow, error) {
	rows, err := q.db.Query(ctx, getPartyByTrainer, trainerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPartyByTrainerRow{}
	for rows.Next() {
		var i GetPartyByTrainerRow
		if err := rows.Scan(
			&i.ID,
			&i.TrainerID,
			&i.OwnpokeID,
			&i.Slot,
			&i.AddedAt,
			&i.Name,
			&i.Stats,
			&i.Types,
			&i.Height,
			&i.Weight,
			&i.BaseExperience,
			&i.BasicSkill,
			&i.SpecialSkill,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPartyCount = `-- name: GetPartyCount :one
SELECT COUNT(*) FROM party
WHERE trainer_id = $1
`

func (q *Queries) GetPartyCount(ctx context.Context, trainerID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getPartyCount, trainerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPartySlotOccupied = `-- name: GetPartySlotOccupied :one
SELECT EXISTS(
    SELECT 1 FROM party
    WHERE trainer_id = $1 AND slot = $2
)
`

type GetPartySlotOccupiedParams struct {
	TrainerID int32 `json:"trainer_id"`
	Slot      int32 `json:"slot"`
}

func (q *Queries) GetPartySlotOccupied(ctx context.Context, arg GetPartySlotOccupiedParams) (bool, error) {
	row := q.db.QueryRow(ctx, getPartySlotOccupied, arg.TrainerID, arg.Slot)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getPokedexEntry = `-- name: GetPokedexEntry :one
SELECT id, trainer_id, name, height, weight, base_experience, stats, types, created_at, updated_at FROM pokedex
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPokedexEntry(ctx context.Context, id int32) (Pokedex, error) {
	row := q.db.QueryRow(ctx, getPokedexEntry, id)
	var i Pokedex
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.BaseExperience,
		&i.Stats,
		&i.Types,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPokedexEntryByNameAndTrainer = `-- name: GetPokedexEntryByNameAndTrainer :one
SELECT id, trainer_id, name, height, weight, base_experience, stats, types, created_at, updated_at FROM pokedex
WHERE name = $1 AND trainer_id = $2 LIMIT 1
`

type GetPokedexEntryByNameAndTrainerParams struct {
	Name      string `json:"name"`
	TrainerID int32  `json:"trainer_id"`
}

func (q *Queries) GetPokedexEntryByNameAndTrainer(ctx context.Context, arg GetPokedexEntryByNameAndTrainerParams) (Pokedex, error) {
	row := q.db.QueryRow(ctx, getPokedexEntryByNameAndTrainer, arg.Name, arg.TrainerID)
	var i Pokedex
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.BaseExperience,
		&i.Stats,
		&i.Types,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOwnedPokemonByTrainer = `-- name: ListOwnedPokemonByTrainer :many
SELECT id, trainer_id, name, height, weight, base_experience, stats, types, caught_at, basic_skill, special_skill FROM ownpoke
WHERE trainer_id = $1
ORDER BY caught_at DESC
`

func (q *Queries) ListOwnedPokemonByTrainer(ctx context.Context, trainerID int32) ([]Ownpoke, error) {
	rows, err := q.db.Query(ctx, listOwnedPokemonByTrainer, trainerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ownpoke{}
	for rows.Next() {
		var i Ownpoke
		if err := rows.Scan(
			&i.ID,
			&i.TrainerID,
			&i.Name,
			&i.Height,
			&i.Weight,
			&i.BaseExperience,
			&i.Stats,
			&i.Types,
			&i.CaughtAt,
			&i.BasicSkill,
			&i.SpecialSkill,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPokedexByTrainer = `-- name: ListPokedexByTrainer :many
SELECT id, trainer_id, name, height, weight, base_experience, stats, types, created_at, updated_at FROM pokedex
WHERE trainer_id = $1
ORDER BY id
`

func (q *Queries) ListPokedexByTrainer(ctx context.Context, trainerID int32) ([]Pokedex, error) {
	rows, err := q.db.Query(ctx, listPokedexByTrainer, trainerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pokedex{}
	for rows.Next() {
		var i Pokedex
		if err := rows.Scan(
			&i.ID,
			&i.TrainerID,
			&i.Name,
			&i.Height,
			&i.Weight,
			&i.BaseExperience,
			&i.Stats,
			&i.Types,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOwnedPokemonSkills = `-- name: UpdateOwnedPokemonSkills :exec
UPDATE ownpoke
SET basic_skill = $2,
    special_skill = $3
WHERE id = $1
`

type UpdateOwnedPokemonSkillsParams struct {
	ID           int32  `json:"id"`
	BasicSkill   []byte `json:"basic_skill"`
	SpecialSkill []byte `json:"special_skill"`
}

func (q *Queries) UpdateOwnedPokemonSkills(ctx context.Context, arg UpdateOwnedPokemonSkillsParams) error {
	_, err := q.db.Exec(ctx, updateOwnedPokemonSkills, arg.ID, arg.BasicSkill, arg.SpecialSkill)
	return err
}
