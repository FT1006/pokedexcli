// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pokemon.sql

package database

import (
	"context"
)

const createPokemon = `-- name: CreatePokemon :one
INSERT INTO pokemon (
    trainer_id,
    name,
    height,
    weight,
    base_experience,
    stats,
    types
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, trainer_id, name, height, weight, base_experience, stats, types, created_at, updated_at
`

type CreatePokemonParams struct {
	TrainerID      int32  `json:"trainer_id"`
	Name           string `json:"name"`
	Height         int32  `json:"height"`
	Weight         int32  `json:"weight"`
	BaseExperience int32  `json:"base_experience"`
	Stats          []byte `json:"stats"`
	Types          []byte `json:"types"`
}

func (q *Queries) CreatePokemon(ctx context.Context, arg CreatePokemonParams) (Pokemon, error) {
	row := q.db.QueryRow(ctx, createPokemon,
		arg.TrainerID,
		arg.Name,
		arg.Height,
		arg.Weight,
		arg.BaseExperience,
		arg.Stats,
		arg.Types,
	)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.BaseExperience,
		&i.Stats,
		&i.Types,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePokemon = `-- name: DeletePokemon :exec
DELETE FROM pokemon
WHERE id = $1
`

func (q *Queries) DeletePokemon(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePokemon, id)
	return err
}

const getPokemon = `-- name: GetPokemon :one
SELECT id, trainer_id, name, height, weight, base_experience, stats, types, created_at, updated_at FROM pokemon
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPokemon(ctx context.Context, id int32) (Pokemon, error) {
	row := q.db.QueryRow(ctx, getPokemon, id)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.BaseExperience,
		&i.Stats,
		&i.Types,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPokemonByNameAndTrainer = `-- name: GetPokemonByNameAndTrainer :one
SELECT id, trainer_id, name, height, weight, base_experience, stats, types, created_at, updated_at FROM pokemon
WHERE name = $1 AND trainer_id = $2 LIMIT 1
`

type GetPokemonByNameAndTrainerParams struct {
	Name      string `json:"name"`
	TrainerID int32  `json:"trainer_id"`
}

func (q *Queries) GetPokemonByNameAndTrainer(ctx context.Context, arg GetPokemonByNameAndTrainerParams) (Pokemon, error) {
	row := q.db.QueryRow(ctx, getPokemonByNameAndTrainer, arg.Name, arg.TrainerID)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.BaseExperience,
		&i.Stats,
		&i.Types,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPokemonByTrainer = `-- name: ListPokemonByTrainer :many
SELECT id, trainer_id, name, height, weight, base_experience, stats, types, created_at, updated_at FROM pokemon
WHERE trainer_id = $1
ORDER BY id
`

func (q *Queries) ListPokemonByTrainer(ctx context.Context, trainerID int32) ([]Pokemon, error) {
	rows, err := q.db.Query(ctx, listPokemonByTrainer, trainerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pokemon{}
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(
			&i.ID,
			&i.TrainerID,
			&i.Name,
			&i.Height,
			&i.Weight,
			&i.BaseExperience,
			&i.Stats,
			&i.Types,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
