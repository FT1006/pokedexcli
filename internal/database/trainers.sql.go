// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: trainers.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTrainer = `-- name: CreateTrainer :one
INSERT INTO trainers (
    name
) VALUES (
    $1
) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateTrainer(ctx context.Context, name pgtype.Text) (Trainer, error) {
	row := q.db.QueryRow(ctx, createTrainer, name)
	var i Trainer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTrainer = `-- name: GetTrainer :one
SELECT id, name, created_at, updated_at FROM trainers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrainer(ctx context.Context, id int32) (Trainer, error) {
	row := q.db.QueryRow(ctx, getTrainer, id)
	var i Trainer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTrainerByName = `-- name: GetTrainerByName :one
SELECT id, name, created_at, updated_at FROM trainers
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetTrainerByName(ctx context.Context, name pgtype.Text) (Trainer, error) {
	row := q.db.QueryRow(ctx, getTrainerByName, name)
	var i Trainer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTrainers = `-- name: ListTrainers :many
SELECT id, name, created_at, updated_at FROM trainers
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListTrainersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTrainers(ctx context.Context, arg ListTrainersParams) ([]Trainer, error) {
	rows, err := q.db.Query(ctx, listTrainers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trainer{}
	for rows.Next() {
		var i Trainer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrainer = `-- name: UpdateTrainer :one
UPDATE trainers 
SET name = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateTrainerParams struct {
	ID   int32       `json:"id"`
	Name pgtype.Text `json:"name"`
}

func (q *Queries) UpdateTrainer(ctx context.Context, arg UpdateTrainerParams) (Trainer, error) {
	row := q.db.QueryRow(ctx, updateTrainer, arg.ID, arg.Name)
	var i Trainer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
